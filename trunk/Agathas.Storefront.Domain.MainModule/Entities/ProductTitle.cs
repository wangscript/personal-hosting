//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Agathas.Storefront.Domain.Entities;

namespace Agathas.Storefront.Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Category))]
    [KnownType(typeof(Color))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(ProductTitle))]
    public partial class ProductTitle: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductTitleId
        {
            get { return _productTitleId; }
            set
            {
                if (_productTitleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductTitleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ProductTitle1 != null && ProductTitle1.ProductTitleId != value)
                        {
                            ProductTitle1 = null;
                        }
                    }
                    _productTitleId = value;
                    OnPropertyChanged("ProductTitleId");
                }
            }
        }
        private int _productTitleId;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public decimal Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private decimal _price;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                    OnNavigationPropertyChanged("Category");
                }
            }
        }
        private Category _category;
    
        [DataMember]
        public Color Color
        {
            get { return _color; }
            set
            {
                if (!ReferenceEquals(_color, value))
                {
                    var previousValue = _color;
                    _color = value;
                    FixupColor(previousValue);
                    OnNavigationPropertyChanged("Color");
                }
            }
        }
        private Color _color;
    
        [DataMember]
        public TrackableCollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    _products = new TrackableCollection<Product>();
                    _products.CollectionChanged += FixupProducts;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_products != null)
                    {
                        _products.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    if (_products != null)
                    {
                        _products.CollectionChanged += FixupProducts;
                    }
                    OnNavigationPropertyChanged("Products");
                }
            }
        }
        private TrackableCollection<Product> _products;
    
        [DataMember]
        public ProductTitle ProductTitles1
        {
            get { return _productTitles1; }
            set
            {
                if (!ReferenceEquals(_productTitles1, value))
                {
                    var previousValue = _productTitles1;
                    _productTitles1 = value;
                    FixupProductTitles1(previousValue);
                    OnNavigationPropertyChanged("ProductTitles1");
                }
            }
        }
        private ProductTitle _productTitles1;
    
        [DataMember]
        public ProductTitle ProductTitle1
        {
            get { return _productTitle1; }
            set
            {
                if (!ReferenceEquals(_productTitle1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProductTitleId != value.ProductTitleId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _productTitle1;
                    _productTitle1 = value;
                    FixupProductTitle1(previousValue);
                    OnNavigationPropertyChanged("ProductTitle1");
                }
            }
        }
        private ProductTitle _productTitle1;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            FixupBrandKeys();
            Category = null;
            FixupCategoryKeys();
            Color = null;
            FixupColorKeys();
            Products.Clear();
            ProductTitles1 = null;
            ProductTitle1 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupBrand(Brand previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProductTitles.Contains(this))
            {
                previousValue.ProductTitles.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.ProductTitles.Contains(this))
                {
                    Brand.ProductTitles.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
                FixupBrandKeys();
            }
        }
    
        private void FixupBrandKeys()
        {
            const string BrandIdKeyName = "Brand.BrandId";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(BrandIdKeyName))
            {
                if(Brand == null ||
                   !Equals(ChangeTracker.ExtendedProperties[BrandIdKeyName], Brand.BrandId))
                {
                    ChangeTracker.RecordOriginalValue(BrandIdKeyName, ChangeTracker.ExtendedProperties[BrandIdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(BrandIdKeyName);
            }
        }
    
        private void FixupCategory(Category previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProductTitles.Contains(this))
            {
                previousValue.ProductTitles.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.ProductTitles.Contains(this))
                {
                    Category.ProductTitles.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Category")
                    && (ChangeTracker.OriginalValues["Category"] == Category))
                {
                    ChangeTracker.OriginalValues.Remove("Category");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Category", previousValue);
                }
                if (Category != null && !Category.ChangeTracker.ChangeTrackingEnabled)
                {
                    Category.StartTracking();
                }
                FixupCategoryKeys();
            }
        }
    
        private void FixupCategoryKeys()
        {
            const string CategoryIdKeyName = "Category.CategoryId";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(CategoryIdKeyName))
            {
                if(Category == null ||
                   !Equals(ChangeTracker.ExtendedProperties[CategoryIdKeyName], Category.CategoryId))
                {
                    ChangeTracker.RecordOriginalValue(CategoryIdKeyName, ChangeTracker.ExtendedProperties[CategoryIdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(CategoryIdKeyName);
            }
        }
    
        private void FixupColor(Color previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProductTitles.Contains(this))
            {
                previousValue.ProductTitles.Remove(this);
            }
    
            if (Color != null)
            {
                if (!Color.ProductTitles.Contains(this))
                {
                    Color.ProductTitles.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Color")
                    && (ChangeTracker.OriginalValues["Color"] == Color))
                {
                    ChangeTracker.OriginalValues.Remove("Color");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Color", previousValue);
                }
                if (Color != null && !Color.ChangeTracker.ChangeTrackingEnabled)
                {
                    Color.StartTracking();
                }
                FixupColorKeys();
            }
        }
    
        private void FixupColorKeys()
        {
            const string ColorIdKeyName = "Color.ColorId";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(ColorIdKeyName))
            {
                if(Color == null ||
                   !Equals(ChangeTracker.ExtendedProperties[ColorIdKeyName], Color.ColorId))
                {
                    ChangeTracker.RecordOriginalValue(ColorIdKeyName, ChangeTracker.ExtendedProperties[ColorIdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(ColorIdKeyName);
            }
        }
    
        private void FixupProductTitles1(ProductTitle previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (ProductTitles1 != null)
            {
                ChangeTracker.ObjectStateChanging += ProductTitles1.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProductTitle1, this))
            {
                previousValue.ProductTitle1 = null;
            }
    
            if (ProductTitles1 != null)
            {
                ProductTitles1.ProductTitle1 = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductTitles1")
                    && (ChangeTracker.OriginalValues["ProductTitles1"] == ProductTitles1))
                {
                    ChangeTracker.OriginalValues.Remove("ProductTitles1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductTitles1", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (ProductTitles1 != null && !ProductTitles1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductTitles1.StartTracking();
                }
            }
        }
    
        private void FixupProductTitle1(ProductTitle previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProductTitles1, this))
            {
                previousValue.ProductTitles1 = null;
            }
    
            if (ProductTitle1 != null)
            {
                ProductTitle1.ProductTitles1 = this;
                ProductTitleId = ProductTitle1.ProductTitleId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductTitle1")
                    && (ChangeTracker.OriginalValues["ProductTitle1"] == ProductTitle1))
                {
                    ChangeTracker.OriginalValues.Remove("ProductTitle1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductTitle1", previousValue);
                }
                if (ProductTitle1 != null && !ProductTitle1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductTitle1.StartTracking();
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.ProductTitle = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Products", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductTitle, this))
                    {
                        item.ProductTitle = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Products", item);
                    }
                }
            }
        }

        #endregion
    }
}
